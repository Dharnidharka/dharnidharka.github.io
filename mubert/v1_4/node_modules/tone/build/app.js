var	midiPart,
	notes_arr,
	player = {},
	intensity = '_1',
	mood = "HAPPINESS",
	genre = "TECHNO",
	track_change_flag = 0,
  filter_all_flag = 0,
	tempPlayer = {},
	tempMidi,
	bpm = 120,
	midi,
	json,
	tempMidi,
	tempJson,
	url,
	base_dir,
	map,
	track,
	stopTime = 0,
	buffer,
	curCollection="STRAIGHT",
	fft_data,
	wave_data
	;

var	limiter = new Tone.Limiter(0);
var	vol = new Tone.Volume(0);

var	baseVolumeMap = {
	  '60': 0,
	  '62': 0,
	  '64': 0,
	  '65': 0,
	  '67': 0,
	  '69': 0,
	  '71': 0,
	  '72': 0,
	};

var	volumeMap = {
	  '60': 0,
	  '62': 0,
	  '64': 0,
	  '65': 0,
	  '67': 0,
	  '69': 0,
	  '71': 0,
	  '72': 0,
	};

var	comp = new Tone.Compressor({
		ratio:12,
		threshold:-24,
		release:0.25,
		attack:0.003,
		knee:30
	});

var	filter3 = new Tone.Filter({
		type:"peaking",
		frequency:200,
		rolloff:-12,
		Q:1,
		gain:0
	});

var	filter2 = new Tone.Filter({
		type:"peaking",
		frequency:5000,
		rolloff:-12,
		Q:1,
		gain:0
	});

var	filter1 = new Tone.Filter({
		type:"highshelf",
		frequency:1500,
		rolloff:-12,
		Q:1,
		gain:0
	});

// Waveform
var fft = new Tone.Analyser("fft", 32);;
var waveform = new Tone.Analyser("waveform", 1024);

var TRACK_LIST = {
	"DRUMS" : "60",
	"PERCS" : "62",
	"HATS" : "64",
	"CLAPS" : "65",
	"BASS" : "67",
	"LEADS" : "69",
	"MIDS" : "71",
	"FX" : "72"
}

var TRACK_LIST_NUMBER = {
	"60":"DRUMS",
	"62":"PERCS",
	"64":"HATS",
	"65":"CLAPS",
	"67":"BASS",
	"69":"LEADS",
	"71":"MIDS",
	"72":"FX"
}

var OLD_FILTER_LIST = {
	"60" : [filter1, filter2, filter3, comp, vol, limiter],
	"62" : [filter1, filter2, filter3, comp, vol, limiter],
	"64" : [filter1, filter2, filter3, comp, vol, limiter],
	"65" : [filter1, filter2, filter3, comp, vol, limiter],
	"67" : [filter1, filter2, filter3, comp, vol, limiter],
	"69" : [filter1, filter2, filter3, comp, vol, limiter],
	"71" : [filter1, filter2, filter3, comp, vol, limiter],
	"72" : [filter1, filter2, filter3, comp, vol, limiter]
}

var FILTER_LIST = {
	"60" : [filter1, filter2, filter3, comp, vol, limiter],
	"62" : [filter1, filter2, filter3, comp, vol, limiter],
	"64" : [filter1, filter2, filter3, comp, vol, limiter],
	"65" : [filter1, filter2, filter3, comp, vol, limiter],
	"67" : [filter1, filter2, filter3, comp, vol, limiter],
	"69" : [filter1, filter2, filter3, comp, vol, limiter],
	"71" : [filter1, filter2, filter3, comp, vol, limiter],
	"72" : [filter1, filter2, filter3, comp, vol, limiter]
}

var	COLLECTIONS = {
	SAD : {
		_1 : {
			genre: "DUBTECHNO",
			collection: "STRAIGHT"
		},
		_2 : {
			genre: "DUBTECHNO",
			collection: "BROKENBEAT"
		},
		_3 : {
			genre: "DUBTECHNO",
			collection: "STRAIGHT"
		},
		_4 : {
			genre: "DUBTECHNO",
			collection: "BROKENBEAT"
		},
	},
	NEGATIVE : {
		_1 : {
			genre: "DUBTECHNO",
			collection: "STRAIGHT"
		},
		_2 : {
			genre: "DUBTECHNO",
			collection: "BROKENBEAT"
		},
		_3 : {
			genre: "DUBTECHNO",
			collection: "STRAIGHT"
		},
		_4 : {
			genre: "DUBTECHNO",
			collection: "BROKENBEAT"
		},
	},
	NEUTRAL : {
		_1 : {
			genre: "TECHNO",
			collection: "STRAIGHT"
		},
		_2 : {
			genre: "TECHNO",
			collection: "BROKENBEAT"
		},
		_3 : {
			genre: "TECHNO",
			collection: "STRAIGHT"
		},
		_4 : {
			genre: "TECHNO",
			collection: "BROKENBEAT"
		},
	},
	HAPPINESS : {
		_1 : {
			genre: "TECHNO",
			collection: "STRAIGHT"
		},
		_2 : {
			genre: "TECHNO",
			collection: "BROKENBEAT"
		},
		_3 : {
			genre: "TECHNO",
			collection: "STRAIGHT"
		},
		_4 : {
			genre: "TECHNO",
			collection: "BROKENBEAT"
		},
	},

}


var MUBERT = function(){

	this.init = function(){
	    this.addBuffering();
	    this.getMidi();
	    this.getNotes();
	    this.removeBuffering();
			this.applyFilters();
	};

	this.getMubert = function(cfg){
	    var useGenre = '';

	    if(typeof(cfg) != 'undefined'){
	    	intensity =  cfg.intensity || intensity;
			mood =  cfg.mood || mood;

			if(typeof(cfg.genre) != 'undefined'){
				useGenre = cfg.genre;
			}
	    }
	    this.getCollection(useGenre);
	    this.changeTrack();
	};

	this.getCollection = function(useGenre){
		//console.log(mood);
		//console.dir(intensity);
		curCollection = COLLECTIONS[mood][intensity].collection;

		if(useGenre!=''){
			genre = useGenre;
		}else{
			genre = COLLECTIONS[mood][intensity].genre;
		}
	};

	this.setSchedule = function(){
	    this.getTempMidi();
	    this.getTempNotes();
	    var interval = new Tone.Time("8m");
	    //console.log(interval.toSeconds());
	    var current = Tone.Transport.seconds;
	    var newtime = current + interval.toSeconds();
	    //console.log(current);
	    //console.log(newtime);
	    Tone.Transport.schedule(function(time){
	        //console.log('schedule');
	        //console.log(time);
	        if(midiPart){
	          midiPart.stop(time);
	          player = tempPlayer;
	          playMidi(midi);
	          //$('.item').removeClass("muted");
	          $('.genre').removeClass("quadrat");
	        }
	      }, newtime);
	};

	setVolumeMap = function(){
	    for(str in player){
	      if(str in volumeMap){
	        player[str].volume.value = baseVolumeMap[str];
	        player[str].mute = false;
	      }
	    }
	    for(str in baseVolumeMap){
	      volumeMap[str] = baseVolumeMap[str];
	    }
	}

	this.addBuffering = function(){
	    $('#bufferContent').removeClass('hidden');
	};

	this.removeBuffering = function(){
	    $('#bufferContent').addClass('hidden');
	};

	this.getMidi = function(){
	    var xhr = new XMLHttpRequest();
	    xhr.open("POST", "https://pro.mubert.com/api", false);
	    var params = '{"method":"Music", "params":[{"APP":"AFP"},{"BPM":"120.00"},{"TONE":"C"},{"SCALE":"MINOR"},{"GENRE":"' + genre + '"},{"MOOD":"' + mood + '"},{"COLLECTION":"' + curCollection + '"}],"params_type":"title", "dt": "web", "app": "afp"}';
		    //console.log('{"method":"Music", "params":[{"APP":"AFP"},{"BPM":"120.00"},{"TONE":"C"},{"SCALE":"MINOR"},{"GENRE":"' + genre + '"},{"MOOD":"' + mood + '"},{"COLLECTION":"' + curCollection + '"}],"params_type":"title", "dt": "web", "app": "afp"}');
	    xhr.send(params);
	    json = JSON.parse(xhr.response);
	    midi = json.data.midi;
	};

	/*this.getNotes = function(){

		$('.item.muted').each(function(){
			$disable = $(this).attr('id');
			delete(json.data.samples[$disable]);
		});

	    samples = json.data.samples;

	    console.dir(samples);

	    player = new Tone.MultiPlayer(samples,
	        function(){
	            console.log('loaded');
	            playMidi(midi);
	            tempPlayer = player;
	            Tone.Transport.start(0);
	        }
	    );
	};*/

        this.addFilter = function(filter_data){
					//y = 220.82x + 22108 for x in (-100, -10)
					//y = 220.82x - 2182.2 for x in (10, 100)
					//y = x* (high_freq - 26.0)/90 - 10*(high_freq - 26.0)/90 + 26.0

					var filter_value = parseFloat(filter_data['value']);
					var filter_type, filter_frequency;
					if(filter_value <= -10){
						filter_type = "lowpass";
						filter_frequency = (220.82 * filter_value) + 22108;
					}
					else if(filter_value >= 10){
						filter_type = "highpass";
						//filter_frequency = (220.82 * filter_value) - 2182.2;
						filter_frequency = ((filter_value - 10) * (8000 - 26.0))/90 + 26.0;
						console.log(filter_frequency);
					}
					else {
						return 0;
					}
          var filter = new Tone.Filter(filter_frequency, filter_type);
          filter_tracks = filter_data['tracks'];
					console.log(filter_tracks);
          if(filter_tracks.length > 0){
            for(var i=0; i<filter_tracks.length; i++){
              switch(filter_tracks[i]){
                  case 'ALL': filter_all_flag = 1; break;

                  default: FILTER_LIST[TRACK_LIST[filter_tracks[i]]].push(filter);
                            break;
              }
            }
          }
          if(filter_all_flag){
						filter_all_flag = 0;
						for(str in FILTER_LIST){
							FILTER_LIST[str].push(filter);
	          }
          }
					this.disconnectFilters();
					this.applyFilters();
					return 0;
        }

      this.addStereoPan = function(panner_data){
        var panner_tracks = panner_data['tracks'];
        var signal = parseInt(panner_data['value'])/100;
				console.log(signal);
        var panner = new Tone.Panner(signal);
        if(panner_tracks.length > 0){
          for(var i=0; i<panner_tracks.length; i++){
            switch(panner_tracks[i]){
                case "ALL": panner_all_flag = 1; break;

                default: FILTER_LIST[TRACK_LIST[panner_tracks[i]]].push(panner);
                          break;
            }
          }
        }
        if(panner_all_flag){
					panner_all_flag = 0;
          for(str in FILTER_LIST){
						FILTER_LIST[str].push(panner);
          }
        }
				this.disconnectFilters();
				this.applyFilters();
				return 0;
			}

	this.applyFilters = function(){
		for(str in FILTER_LIST){
			var len = Object.keys(FILTER_LIST[str]).length;
			player[str].connect(FILTER_LIST[str][0]);
			for(var i=0; i< len-1; i++){
				FILTER_LIST[str][i].connect(FILTER_LIST[str][i+1]);
			}
			FILTER_LIST[str][len-1].toMaster();
		}
		OLD_FILTER_LIST = FILTER_LIST;
	};

	this.disconnectFilters = function(){
		for(str in OLD_FILTER_LIST){
			var len = Object.keys(OLD_FILTER_LIST[str]).length;
			player[str].disconnect(OLD_FILTER_LIST[str][0]);
			for(var i=0; i< len-1; i++){
				OLD_FILTER_LIST[str][i].disconnect(OLD_FILTER_LIST[str][i+1]);
			}
		}
	}

	this.getNotes = function(){
	    samples = json.data.samples;
	    len = Object.keys(samples).length;
	    var count = 0;
	    for(sample in samples){
	    player[sample] = new Tone.Player(samples[sample],
	            function(){
	              //console.log(sample);
	              count++;
	              if(count == len){
	                setVolumeMap();
	                playMidi(midi);
	                Tone.Transport.start(0);
	              }
	            }
	        );
	    }
	  }


	this.getTempMidi = function(){
	    var xhr = new XMLHttpRequest();
	    xhr.open("POST", "https://pro.mubert.com/api", false);
	    var params = '{"method":"Music", "params":[{"APP":"AFP"},{"BPM":"120.00"},{"TONE":"C"},{"SCALE":"MINOR"},{"GENRE":"' + genre + '"},{"MOOD":"' + mood + '"},{"COLLECTION":"' + curCollection + '"}],"params_type":"title", "dt": "web", "app": "afp"}';
	    //console.log('{"method":"Music", "params":[{"APP":"AFP"},{"BPM":"120.00"},{"TONE":"C"},{"SCALE":"MINOR"},{"GENRE":"' + genre + '"},{"MOOD":"' + mood + '"},{"COLLECTION":"' + curCollection + '"}],"params_type":"title", "dt": "web", "app": "afp"}');
	    xhr.send(params);
	    tempJson = JSON.parse(xhr.response);
	    tempMidi = tempJson.data.midi;
	};

    /*this.getTempNotes = function(){

		$('.item.muted').each(function(){
			$disable = $(this).attr('id');
			delete(tempJson.data.samples[$disable]);
		});

	    samples = tempJson.data.samples;

	    console.dir(samples);

	    tempPlayer = new Tone.MultiPlayer(samples,
	              function(){
	                console.log('sample loaded');
	              }
	          );
	};*/


	this.getTempNotes = function(){
	    tempSamples = tempJson.data.samples;
	    for(var sample in samples){
	      tempPlayer[sample] = new Tone.Player({
	                "url" : samples[sample],
	                "loop" : false
	        });
	    }
    }

	this.changeTrack = function(){
	  console.log('changeTrack');
	  this.setSchedule();
	};

	/*var playMidi = function(file) {
		MidiConvert.load(file, function(midi) {
		    // make sure you set the tempo before you schedule the events
		    Tone.Transport.bpm.value = midi.header.bpm;
		    midiPart = new Tone.Part(function(time, note) {
		    //console.log(time, note);
			    var str = note.midi + '';
			    if(player.buffers.has(str)){
			//      player.connect(cheby).start(str, time, 0, note.duration);
			      player.connect(comp).start(str, time, 0, note.duration);
			    }

			}, midi.tracks[0].notes).start(0);
			     midiPart.loop = true;
			     midiPart.loopEnd = midi.duration;
			     Tone.Transport.bpm.value = bpm;
			});
		};*/

	var playMidi = function(file) {
			MidiConvert.load(file, function(midi) {
		    // make sure you set the tempo before you schedule the events
		    Tone.Transport.bpm.value = midi.header.bpm;
		    midiPart = new Tone.Part(function(time, note) {
		    //console.log(time, note);
		    var str = note.midi + '';
		    if(str in player){
		      //console.log(fft);

		      //setWaveformFFT();

		      player[str].fan(fft, waveform).start(time, 0, note.duration);

		      if(str in volumeMap){
		        //player[str].volume.value = volumeMap[str];
		      }

		       //console.log(player);
		    }

		    if(typeof(getWaveform)!='undefined'){

		    	getWaveform(TRACK_LIST_NUMBER[str],fft.analyse(),waveform.analyse());

			}

		  }, midi.tracks[0].notes).start(0);
		     midiPart.loop = true;
		     midiPart.loopEnd = midi.duration;
		     Tone.Transport.bpm.value = bpm;
		  });
	}

	this.enableTracks = function(tracks){

		if(typeof(tracks)!='undefined'){

			for(tr in tracks){

				id_track = TRACK_LIST[tracks[tr]];

				volumeMap[id_track] = 0;
		        if(id_track in player){
		            player[id_track].mute = false;
		        }

	        }

		}else{

			for(tr in TRACK_LIST){

				id_track = TRACK_LIST[tr];

				volumeMap[id_track] = 0;
		        if(id_track in player){
		            player[id_track].mute = false;
		        }

			}

		}

	}

	this.disableTracks = function(tracks){

		if(typeof(tracks)!='undefined'){

			for(tr in tracks){

				id_track = TRACK_LIST[tracks[tr]];

				volumeMap[id_track] = -100;
		        if(id_track in player){
		            player[id_track].mute = true;
		        }

	        }

		}else{

			for(tr in TRACK_LIST){

				id_track = TRACK_LIST[tr];

				volumeMap[id_track] = -100;
		        if(id_track in player){
		            player[id_track].mute = true;
		        }

			}

		}

	}


	this.init();

}
